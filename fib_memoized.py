"""
>>> fib(2)
1

>>> fib(3)
2

>>> fib(5)
5

>>> fib(6)
8

>>> fib(16)
987

>>> fib(128)
251728825683549488150424261L

>>> fib(1024)
4506699633677819813104383235728886049367860596218604830803023149600030645708721396248792609141030396244873266580345011219530209367425581019871067646094200262285202346655868899711089246778413354004103631553925405243L

>>> fib(2048)
45415304437437894250455714462906892027009082612936444289511823902789714525092834356843497180347717304332077420750102996639625006407838018797363807741815915794968069489957662592260489596860563484362187663942834824730009793065752175759244081518806465182648002219755758995565516482064617351513826704211517343602925990599710229276939710372081414109914714493582044185153918055170241694035610145547104337536614028338983073680262684101L

"""


def memoize(func):
    results = {}
    def memoized_func(*args):
        if args not in results:
            results[args] = func(*args)
        return results[args]
    return memoized_func

@memoize
def fib(n):
    """Calculates de n-th fibonacci number"""
    if n in (0, 1):
        return n
    if n == 2:
        return 1

    k = n / 2
    a = fib(k + 1)
    b = fib(k)
    if n % 2 == 1:
        return a * a + b * b
    else:
        return b * (2 * a - b)



if __name__ == "__main__":
    import doctest
    doctest.testmod()
